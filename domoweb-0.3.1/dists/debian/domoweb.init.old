#!/bin/sh
#
### BEGIN INIT INFO
# Provides:          domoweb
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs $network
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start DomoWeb UI for Domogik
# Description:       Domoweb is the web interface of domogik
### END INIT INFO

. /lib/lsb/init-functions

set -e

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/dmg_domoweb
NAME=dmg_domoweb
DESC="Domoweb UI"
LOGFILE=/var/log/domoweb/console.log
PROCESS=$NAME

test -x $DAEMON || exit 0

RUN=no
DOMOWEB_USER=domoweb

DIETIME=1               # Time to wait for the server to die, in seconds
                        # If this value is set too low you might not
                        # let some servers to die gracefully and
                        # 'restart' will not work

STARTTIME=3             # Time to wait for the server to start, in seconds
                        # If this value is set each time the server is
                        # started (on start or restart) the script will
                        # stall to try to determine if it is running
                        # If it is not set and the server takes time
                        # to setup a pid file the log message might
                        # be a false positive (says it did not start
                        # when it actually did)


# Include defaults if available
if [ -f /etc/default/domoweb ] ; then
    . /etc/default/domoweb
fi

if [ "x$RUN" != "xyes" ] ; then
    echo "$NAME disabled; edit /etc/default/domoweb"
    exit 0
fi


start_server() {
    /bin/su - ${DOMOWEB_USER} -c "$DAEMON >>$LOGFILE 2>&1 &"
    sleep $STARTTIME
}

stop_server() {
    if [ "$(running)" = "y" ] ;  then
        killall $PROCESS >/dev/null 2>1
        sleep $DIETIME
    fi
    if [ "$(running)" = "y" ] ;  then
        sleep $DIETIME
        killall -15 $PROCESS >/dev/null 2>1
        sleep $DIETIME
    fi
    if [ "$(running)" = "y" ] ;  then
        sleep $DIETIME
        killall -9 $PROCESS >/dev/null 2>1
        sleep $DIETIME
    fi
}

restart_server() {
    stop_server
    if [ "$(running)" = "y" ] ;  then
        echo n
        return 1
    fi
    sleep $DIETIME
    start_server
    sleep $STARTTIME
	if [ "$(running)" = "y" ] ; then
		echo y
	else
		echo n
	fi
}

running() {
    set +e
    RUNNING=$(/bin/ps -Af | /bin/grep -c $PROCESS)
	set -e
    if [ $RUNNING -gt 0 ] ; then
		echo y
	else
		echo n
    fi
}

case "$1" in
  start)
        log_daemon_msg "Starting $DESC " "$NAME"
        if [ "$(running)" = "y" ] ; then
                log_progress_msg "apparently already running"
                log_end_msg 0
                exit 0
        fi
        start_server
        if  [ "$(running)" = "y" ] ;  then
			# It's ok, the server started and is running
            log_end_msg 0
        else
            # It is not running after we did start
            log_end_msg 1
        fi
    ;;
  stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        stop_server
        if [ "$(running)" = "y" ] ; then
            log_end_msg 1
        else
            log_end_msg 0
        fi
    ;;
  force-reload|restart)
        log_daemon_msg "Restarting $DESC" "$NAME"
        if [ "$(restart_server)" = "y" ] ; then
            log_end_msg 0
        else
            log_end_msg 1
        fi
    ;;
  status)
        log_daemon_msg "Checking status of $DESC" "$NAME"
        if [ "$(running)" = "y" ] ;  then
            log_progress_msg "running"
            log_end_msg 0
        else
            log_progress_msg "apparently not running"
            log_end_msg 1
            exit 0
        fi
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|force-reload}" >&2
    exit 1
    ;;
esac

exit 0
